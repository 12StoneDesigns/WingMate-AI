// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String    @id @default(cuid())
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  username       String?   @unique
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  accounts       Account[]
  sessions       Session[]
  profile        Profile?
  subscription   Subscription?
  telegramProfile TelegramProfile?
  conversations   Conversation[]
  dateAdvice      DateAdvice[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Profile {
  id              String   @id @default(cuid())
  userId          String   @unique
  bio             String?
  gender          String?
  birthDate       DateTime?
  location        String?
  preferences     String?  // JSON stored as string in SQLite
  datingGoals     String   // Array stored as comma-separated string in SQLite
  personalityType String?
  interests       String   // Array stored as comma-separated string in SQLite
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Subscription {
  id              String   @id @default(cuid())
  userId          String   @unique
  status          String   // active, canceled, expired
  plan            String   // free, pro, enterprise
  currentPeriodEnd DateTime
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model TelegramProfile {
  id              String   @id @default(cuid())
  userId          String   @unique
  telegramId      String   @unique
  username        String?
  firstName       String?
  lastName        String?
  chatId          String   @unique
  isActive        Boolean  @default(true)
  lastInteraction DateTime @default(now())
  settings        String?  // JSON stored as string in SQLite
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Conversation {
  id          String   @id @default(cuid())
  userId      String
  matchName   String
  context     String?
  status      String   // active, archived
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages    Message[]
  insights    ConversationInsight[]
}

model Message {
  id             String   @id @default(cuid())
  conversationId String
  content        String
  role           String   // user, match, assistant
  sentiment      Float?   // Sentiment score (-1 to 1)
  timestamp      DateTime @default(now())
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@index([conversationId])
}

model ConversationInsight {
  id             String   @id @default(cuid())
  conversationId String
  type           String   // sentiment, suggestion, warning
  content        String
  priority       String?  // low, medium, high
  isRead         Boolean  @default(false)
  createdAt      DateTime @default(now())
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@index([conversationId])
}

model DateAdvice {
  id          String   @id @default(cuid())
  userId      String
  category    String   // pre-date, during-date, post-date
  content     String
  context     String?  // JSON stored as string in SQLite
  isUsed      Boolean  @default(false)
  usedAt      DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model ConversationStarter {
  id          String   @id @default(cuid())
  category    String   // ice_breaker, deep_conversation, flirty, casual
  content     String
  context     String?
  tags        String   // Array stored as comma-separated string in SQLite
  successRate Float    @default(0)
  useCount    Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([category])
}
